已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


0 FROM --platform=${BUILDPLATFORM} node:lts-alpine
1 ARG TARGETPLATFORM
2 ARG TARGETARCH
3 ARG TARGETVARIANT
4 RUN printf "I'm building for TARGETPLATFORM=${TARGETPLATFORM}" && printf ", TARGETARCH=${TARGETARCH}" && printf ", TARGETVARIANT=${TARGETVARIANT} \n" && printf "With uname -s : " && uname -s && printf "and  uname -m : " && uname -mm
5 RUN apk add --no-cache dumb-init
6 WORKDIR /emailengine
7 COPY . .
8 RUN npm install --omit=dev
9 RUN npm run prepare-docker
10 RUN chmod +x ./update-info.sh
11 RUN ./update-info.sh
12 ENV EENGINE_APPDIR=/emailengine
13 ENV EENGINE_HOST=0.0.0.0
14 ENV EENGINE_API_PROXY=true
15 ENTRYPOINT ["/usr/bin/dumb-init", "--"]
16 CMD node ${EENGINE_APPDIR}/server.js

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。
注意不是只判断前后两条指令行间的依赖关系，存在(1,3)这种情况，且前后两条指令不一定有依赖关系，依赖关系定义是即不可交换的偏序关系，交换后会导致原镜像构建失败。

[
    (0, 4),  # FROM 指令需要在 RUN 指令之前执行
    (1, 4),  # ARG 指令需要在 RUN 指令之前执行，以便获取构建参数
    (2, 4),  # ARG 指令需要在 RUN 指令之前执行，以便获取构建参数
    (3, 4),  # ARG 指令需要在 RUN 指令之前执行，以便获取构建参数
    (4, 5),  # 前一个 RUN 指令需完成后，才能进行 apk 安装
    (5, 6),  # RUN apk 指令需完成后，才能设置工作目录
    (6, 7),  # WORKDIR 指令需完成后，才能 COPY 文件
    (7, 8),  # COPY 指令需完成后，才能运行 npm install
    (8, 9),  # npm install 完成后，才能运行 npm run prepare-docker
    (9, 10), # npm run prepare-docker 完成后，才能更改 update-info.sh 的权限
    (10, 11),# chmod 完成后，才能执行 update-info.sh
    (12, 15),# ENV 指令应在 ENTRYPOINT 之前设置环境变量
    (13, 15),# ENV 指令应在 ENTRYPOINT 之前设置环境变量
    (14, 15) # ENV 指令应在 ENTRYPOINT 之前设置环境变量
]
