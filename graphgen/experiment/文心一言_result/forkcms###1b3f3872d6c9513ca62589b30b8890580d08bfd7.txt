已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


FROM php:7.4-apache
LABEL maintainer="Fork CMS <info@fork-cms.com>"
RUN a2enmod rewrite
RUN apt-get update && apt-get install -y --no-install-recommends --allow-downgrades libfreetype6-dev libjpeg62-turbo-dev libonig-dev libz-dev zlib1g-dev libpng-dev && docker-php-ext-configure gd --with-freetype --with-jpeg && docker-php-ext-install -j$(nproc) gd && rm -rf /var/lib/apt/lists/*
RUN docker-php-ext-install pdo_mysql
RUN docker-php-ext-install mbstring
RUN apt-get update && apt-get install -y libzip-dev unzip && docker-php-ext-install zip && rm -rf /var/lib/apt/lists/*
RUN apt-get update && apt-get install -y --no-install-recommends g++ libicu-dev zlib1g-dev && docker-php-ext-configure intl && docker-php-ext-install intl && rm -rf /var/lib/apt/lists/*
COPY var/docker/php/php.ini ${PHP_INI_DIR}/php.ini
RUN pecl install xdebug-2.9.8 && docker-php-ext-enable xdebug && rm -rf /tmp/pear
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer
WORKDIR /var/www/html
COPY composer.json ./
COPY composer.lock ./
RUN composer install --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress && composer clear-cache
COPY . /var/www/html
RUN composer dump-autoload --optimize --classmap-authoritative --no-dev
RUN chown -R www-data:www-data /var/www/html
EXPOSE 80 443

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。

[(1, 0),    # LABEL指令依赖于FROM指令，因为标签需要在确定基础镜像后添加  
 (2, 1),    # 第一个RUN指令依赖于LABEL指令，因为需要设置完维护者信息后启用Apache的rewrite模块  
 (3, 2),    # 第二个RUN指令依赖于第一个RUN指令，因为需要启用rewrite模块后才能安装PHP扩展和依赖  
 (4, 3),    # 第三个RUN指令依赖于第二个RUN指令，因为需要在安装完GD库后才能安装pdo_mysql扩展  
 (5, 4),    # 第四个RUN指令依赖于第三个RUN指令，因为需要在安装完pdo_mysql扩展后才能安装mbstring扩展  
 (6, 5),    # 第五个RUN指令依赖于第四个RUN指令，因为需要在安装完mbstring扩展后才能安装zip扩展和依赖  
 (7, 6),    # 第六个RUN指令依赖于第五个RUN指令，因为需要在安装完zip扩展后才能安装intl扩展和依赖  
 (8, 7),    # COPY指令依赖于第六个RUN指令，因为需要在安装完所有PHP扩展后才能复制自定义的php.ini文件  
 (9, 8),    # 第七个RUN指令依赖于COPY指令，因为需要先复制php.ini文件后才能安装xdebug扩展  
 (10, 9),   # 第八个RUN指令依赖于第七个RUN指令，因为需要在安装完xdebug扩展后才能安装Composer  
 (11, 10),  # WORKDIR指令依赖于第八个RUN指令，因为需要在安装完Composer后才能设置工作目录  
 (12, 11),  # 第一个COPY指令依赖于WORKDIR指令，因为需要设置工作目录后才能复制composer.json文件  
 (13, 12),  # 第二个COPY指令依赖于第一个COPY指令，因为需要先复制composer.json文件后才能复制composer.lock文件  
 (14, 13),  # 第九个RUN指令依赖于第二个COPY指令，因为需要在composer.json和composer.lock都准备好后才能进行composer install操作  
 (15, 14),  # 第三个COPY指令依赖于第九个RUN指令，因为需要在composer install完成后才能复制其他文件到容器中  
 (16, 15),  # 第十个RUN指令依赖于第三个COPY指令，因为需要复制完所有文件后才能执行composer dump-autoload命令  
 (17, 16),  # 第十一个RUN指令依赖于第十个RUN指令，因为需要在dump-autoload后更改文件所有权  
 (18, 17)] # EXPOSE指令依赖于第十一个RUN指令，因为需要在所有配置和安装完成后才能暴露端口