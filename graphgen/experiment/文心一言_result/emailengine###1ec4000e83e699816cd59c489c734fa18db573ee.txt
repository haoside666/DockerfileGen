已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


FROM --platform=${BUILDPLATFORM} node:lts-alpine
ARG TARGETPLATFORM
ARG TARGETARCH
ARG TARGETVARIANT
RUN printf "I'm building for TARGETPLATFORM=${TARGETPLATFORM}" && printf ", TARGETARCH=${TARGETARCH}" && printf ", TARGETVARIANT=${TARGETVARIANT} \n" && printf "With uname -s : " && uname -s && printf "and  uname -m : " && uname -mm
RUN apk add --no-cache dumb-init
WORKDIR /emailengine
COPY . .
RUN npm install --omit=dev
RUN npm run prepare-docker
RUN chmod +x ./update-info.sh
RUN ./update-info.sh
ENV EENGINE_APPDIR=/emailengine
ENV EENGINE_HOST=0.0.0.0
ENV EENGINE_API_PROXY=true
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD node ${EENGINE_APPDIR}/server.js

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。

[(1, 0),  # ARG指令依赖于FROM指令，因为需要在基础镜像上设置构建参数  
 (2, 0),  # 同上，其他ARG指令也依赖于FROM指令  
 (3, 1, 2, 3),  # RUN指令依赖于所有之前的ARG指令，因为它使用这些参数  
 (4, 3),  # apk add指令依赖于上一个RUN指令，因为在输出信息之后安装软件包  
 (5, 4),  # WORKDIR指令依赖于apk add指令，因为需要在安装软件包后设置工作目录  
 (6, 5),  # COPY指令依赖于WORKDIR指令，因为需要将文件复制到工作目录  
 (7, 6),  # npm install指令依赖于COPY指令，因为需要在复制文件后安装依赖  
 (8, 7),  # npm run指令依赖于npm install指令，因为需要在安装依赖后执行准备脚本  
 (9, 8),  # chmod指令依赖于npm run指令，因为需要修改脚本的权限  
 (10, 9),  # 执行脚本指令依赖于chmod指令，因为需要在修改权限后执行脚本  
 (11, 10),  # ENV指令依赖于执行脚本指令，因为环境变量可能在脚本执行后设置  
 (12, 11),  # ENV指令依赖于上一个ENV指令，因为环境变量可以连续设置  
 (13, 12),  # ENTRYPOINT指令依赖于所有ENV指令，因为它可能使用这些环境变量  
 (14, 13)]  # CMD指令依赖于ENTRYPOINT指令，因为CMD命令在容器启动时执行，而ENTRYPOINT定义了如何执行CMD