foo() { echo $*; export x=$((x + 1)) ; }

eexit(){
  echo $1 'please email pash-devs@googlegroups.com'
  exit 1
}

nargs(){
  echo $# $1 $2
}

rm_files(){
  echo "${@}"
  exit 0
}

append_nl_if_not(){
  if [ -z "$1" ]; then
    echo "No file argument given!"
    exit 1
  else
    if [ ! -f "$1" ]; then
      echo "File $1 doesn't exist!"
      exit 1
    else
      tail -c 1 "$1" | od -ta | grep -q nl
      if [ $? -eq 1 ]; then
        echo >> "$1"
      fi
    fi
  fi
}

install_deps_source_setup() {
    cd input/
    if [ -e install-deps.sh ]; then
        echo "Installing dependencies"
        bash install-deps.sh
    fi
    source setup.sh
    setup_dataset $1 > /dev/null
    cd ..
}

usage() {
    echo "Usage: `basename $0` [option...] -- shell script to build PaSh"
    echo
    echo "   -h, --help                 Show this help message"
    echo "   -o, --opt-agg              Install g++-10 and switch to it as main compiler. Build the optimized c++ aggregators (run with sudo)"
    echo "   -s, --show-deps            Show all the required dependencies (does not setup/deploy PaSh nor its dependencies)"
    echo "   -e, --install-eval         Install all the dependencies needed for reproducing the evaluation figures (uses sudo, only for Ubuntu/Debian currently)"
    echo
    exit 1
}

install_eval_deps() {
    echo "Installing evaluation dependencies (needs sudo)"
    # needed for majority of the benchmarks (not available in docker instances)
    sudo apt-get install unzip
    paths="$(find $PASH_TOP/evaluation/benchmarks -name install-deps.sh)"
    for f in $(echo $paths); do
        path=$(dirname $(readlink -f $f))
        cd $path
        bash install-deps.sh
        cd - > /dev/null
    done
    echo "Generating PDF plots of the evaluation results is optional and requires R-packages"
    echo "Follow Installation Guide from: $PASH_TOP/evaluation/eval_script/README.md"
}



confirm_installation_works() {
  echo "Confirming installation works.."
  set +e
  $PASH_TOP/pa.sh $PASH_TOP/evaluation/intro/hello-world.sh
  if [ $? -ne 0 ]; then
    echo "Something failed, please check logs"
  fi
  set -e
}

isDocker(){
    local cgroup=/proc/1/cgroup
    test -f $cgroup && [[ "$(<$cgroup)" = *:cpuset:/docker/* ]]
}

isDockerBuildkit(){
    local cgroup=/proc/1/cgroup
    test -f $cgroup && [[ "$(<$cgroup)" = *:cpuset:/docker/buildkit/* ]]
}

isDockerContainer(){
    [ -e /.dockerenv ]
}