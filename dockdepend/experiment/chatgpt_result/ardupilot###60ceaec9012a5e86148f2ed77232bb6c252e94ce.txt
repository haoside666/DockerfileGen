已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


0 ARG BASE_IMAGE="ubuntu"
1 ARG TAG="22.04"
2 FROM ${BASE_IMAGE}:${TAG}
3 WORKDIR /ardupilot
4 ARG DEBIAN_FRONTEND=noninteractive
5 ARG USER_NAME=ardupilot
6 ARG USER_UID=1000
7 ARG USER_GID=1000
8 ARG SKIP_AP_EXT_ENV=1
9 ARG SKIP_AP_GRAPHIC_ENV=1
10 ARG SKIP_AP_COV_ENV=1
11 ARG SKIP_AP_GIT_CHECK=1
12 RUN groupadd ${USER_NAME} --gid ${USER_GID} && useradd -l -m ${USER_NAME} -u ${USER_UID} -g ${USER_GID} -s /bin/bash
13 RUN apt-get update && apt-get install --no-install-recommends -y lsb-release sudo tzdata bash-completion
14 COPY Tools/environment_install/install-prereqs-ubuntu.sh /ardupilot/Tools/environment_install/
15 COPY Tools/completion /ardupilot/Tools/completion/
16 ENV USER=${USER_NAME}
17 RUN echo "ardupilot ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${USER_NAME}
18 RUN chmod 0440 /etc/sudoers.d/${USER_NAME}
19 RUN chown -R ${USER_NAME}:${USER_NAME} /${USER_NAME}
20 USER ${USER_NAME}
21 ENV SKIP_AP_EXT_ENV=$SKIP_AP_EXT_ENV SKIP_AP_GRAPHIC_ENV=$SKIP_AP_GRAPHIC_ENV SKIP_AP_COV_ENV=$SKIP_AP_COV_ENV SKIP_AP_GIT_CHECK=$SKIP_AP_GIT_CHECK
22 RUN Tools/environment_install/install-prereqs-ubuntu.sh -y
23 RUN echo "alias waf=\"/${USER_NAME}/waf\"" >> ~/.ardupilot_env
24 RUN echo "if [ -d \"\$HOME/.local/bin\" ] ; then\nPATH=\"\$HOME/.local/bin:\$PATH\"\nfi" >> ~/.ardupilot_env
25 RUN export ARDUPILOT_ENTRYPOINT="/home/${USER_NAME}/ardupilot_entrypoint.sh" && echo "#!/bin/bash" > $ARDUPILOT_ENTRYPOINT && echo "set -e" >> $ARDUPILOT_ENTRYPOINT && echo "source /home/${USER_NAME}/.ardupilot_env" >> $ARDUPILOT_ENTRYPOINT && echo 'exec "$@"' >> $ARDUPILOT_ENTRYPOINT && chmod +x $ARDUPILOT_ENTRYPOINT && sudo mv $ARDUPILOT_ENTRYPOINT /ardupilot_entrypoint.sh
26 ENV BUILDLOGS=/tmp/buildlogs
27 RUN sudo apt-get clean && sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
28 ENV CCACHE_MAXSIZE=1G
29 ENTRYPOINT ["/ardupilot_entrypoint.sh"]
30 CMD ["bash"]

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。
注意不是只判断前后两条指令行间的依赖关系，存在(1,3)这种情况，且前后两条指令不一定有依赖关系，依赖关系定义是即不可交换的偏序关系，交换后会导致原镜像构建失败。

[
    (0, 2),  # ARG BASE_IMAGE 和 ARG TAG 需要在 FROM 指令之前定义
    (1, 2),  # ARG TAG 需要在 FROM 指令之前定义
    (2, 3),  # FROM 指令设置基础镜像，WORKDIR 需要在其基础上进行
    (3, 12), # WORKDIR 设置工作目录，RUN 需要在其基础上进行
    (4, 12), # ARG DEBIAN_FRONTEND 需要在 RUN 指令之前定义
    (5, 12), # ARG USER_NAME 需要在 RUN 指令之前定义
    (6, 12), # ARG USER_UID 需要在 RUN 指令之前定义
    (7, 12), # ARG USER_GID 需要在 RUN 指令之前定义
    (8, 12), # ARG SKIP_AP_EXT_ENV 需要在 RUN 指令之前定义
    (9, 12), # ARG SKIP_AP_GRAPHIC_ENV 需要在 RUN 指令之前定义
    (10, 12),# ARG SKIP_AP_COV_ENV 需要在 RUN 指令之前定义
    (11, 12),# ARG SKIP_AP_GIT_CHECK 需要在 RUN 指令之前定义
    (12, 13),# RUN 创建用户组和用户后，需要更新包管理器
    (13, 14),# RUN 安装必要的包后，COPY 安装脚本
    (14, 22),# COPY 安装脚本后，RUN 执行该脚本
    (15, 22),# COPY 复制完成后，RUN 执行安装
    (16, 17),# ENV 定义用户后，RUN 设置 sudo 权限
    (17, 18),# RUN 设置 sudo 权限文件后，需要修改权限
    (18, 19),# RUN 修改 sudo 权限后，需要更改用户目录的拥有权
    (19, 20),# RUN 更改拥有权后，USER 切换到新用户
    (20, 21),# USER 切换用户后，需要设置环境变量
    (21, 22),# ENV 设置环境变量后，RUN 执行安装脚本
    (22, 23),# RUN 执行安装脚本后，需要创建环境变量的别名
    (23, 24),# RUN 创建别名后，需要添加 PATH
    (25, 29),# RUN 创建入口点脚本后，需要将其移动到指定位置
    (26, 27),# ENV 定义构建日志后，RUN 清理缓存
    (28, 29) # ENV 设置 CCACHE_MAXSIZE 后，ENTRYPOINT 需要在环境变量配置之后
]
