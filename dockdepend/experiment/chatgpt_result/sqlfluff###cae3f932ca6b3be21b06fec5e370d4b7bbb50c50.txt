已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


0 FROM python:3.9-slim-bullseye
1 WORKDIR /app
2 ENV VIRTUAL_ENV /app/.venv
3 RUN python -m venv $VIRTUAL_ENV
4 ENV PATH $VIRTUAL_ENV/bin:$PATH
5 RUN pip install --no-cache-dir --upgrade pip setuptools wheel pip-tools
6 COPY pyproject.toml .
7 RUN pip-compile -o requirements.txt pyproject.toml -v --strip-extras
8 RUN pip install --no-cache-dir --upgrade -r requirements.txt
9 COPY MANIFEST.in .
10 COPY README.md .
11 COPY src ./src
12 RUN pip install --no-cache-dir --no-dependencies .
13 USER 5000
14 WORKDIR /sql
15 ENTRYPOINT ["sqlfluff"]
16 CMD ["--help"]

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。
注意不是只判断前后两条指令行间的依赖关系，存在(1,3)这种情况，且前后两条指令不一定有依赖关系，依赖关系定义是即不可交换的偏序关系，交换后会导致原镜像构建失败。

[
    (0, 1),  # FROM 指令需要在 WORKDIR 指令之前定义
    (1, 2),  # WORKDIR 指令需要在 ENV 指令之前定义，以确保环境变量路径正确
    (2, 3),  # ENV VIRTUAL_ENV 需要在 RUN 创建虚拟环境之前定义
    (3, 4),  # RUN 创建虚拟环境需要在 ENV PATH 指令之前完成
    (4, 5),  # ENV PATH 需要在 RUN 安装 pip 包之前定义
    (5, 6),  # RUN pip install 需要在 COPY pyproject.toml 之前完成，以确保安装的依赖可用
    (6, 7),  # COPY pyproject.toml 需要在 RUN pip-compile 之前执行
    (7, 8),  # RUN pip-compile 需要在 RUN pip install 之前完成
    (8, 9),  # RUN pip install 需要在 COPY MANIFEST.in 之前完成
    (9, 10), # COPY MANIFEST.in 需要在 COPY README.md 之前完成
    (10, 11),# COPY README.md 需要在 COPY src 之前完成
    (11, 12),# COPY src 需要在 RUN pip install 之前完成以确保源码存在
    (12, 13),# RUN pip install 需要在 USER 指令之前完成
    (1, 14), # WORKDIR 指令需要在第二个 WORKDIR 指令之前定义
]
