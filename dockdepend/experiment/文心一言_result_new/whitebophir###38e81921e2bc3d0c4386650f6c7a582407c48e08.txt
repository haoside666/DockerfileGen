已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


FROM node:20-alpine3.17
WORKDIR /opt/app
RUN chown -R 1000:1000 /opt/app
RUN apk update && apk add libcap
RUN setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/node
USER 1000:1000
COPY package.json package-lock.json ./
RUN npm ci --production
COPY --chown=1000:1000 . .
ENV PORT=80
EXPOSE 80
VOLUME /opt/app/server-data
CMD ["/usr/local/bin/node", "server/server.js"]

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。

[(0, 1),  # WORKDIR 依赖于 FROM，因为工作目录设置基于基础镜像  
 (1, 2),  # RUN chown -R : 依赖于 WORKDIR，因为所有权更改是对已存在目录进行的  
 (2, 3),  # RUN apk update && apk add 依赖于 chown，因为安装库之前可能需要正确的文件权限  
 (3, 4),  # RUN setcap 依赖于 apk 安装，因为设置能力需要 libcap 库  
 (4, 5),  # USER 依赖于 setcap，因为设置用户前需要确保相关的权限和能力设置正确  
 (5, 6),  # COPY package.json package-lock.json 依赖于 USER，因为文件复制后的所有权应与运行应用的用户匹配  
 (6, 7),  # RUN npm ci --production 依赖于文件复制，因为需要在复制了必要的 npm 文件之后安装依赖  
 (7, 8),  # COPY --chown=: . . 依赖于 npm 安装，因为通常在安装完依赖后复制源代码  
 (8, 9),  # ENV PORT= 不依赖于其他指令，因为环境变量设置是独立的  
 (9, 10), # EXPOSE  不依赖于其他指令，因为端口暴露是独立的  
 (10, 11), # VOLUME /opt/app/server-data 不依赖于其他指令，因为卷定义是独立的  
 (11, 12)] # CMD 依赖于之前的所有指令，因为所有必要的配置和文件都已就绪，可以启动应用