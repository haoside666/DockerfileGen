已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


FROM python:3.11-slim
ARG BUILD_DATE
ARG VCS_REF
LABEL org.label-schema.build-date=$BUILD_DATE org.label-schema.name="Vyper" org.label-schema.description="Vyper is an experimental programming language" org.label-schema.url="https://vyper.readthedocs.io/en/latest/" org.label-schema.vcs-ref=$VCS_REF org.label-schema.vcs-url="https://github.com/vyperlang/vyper" org.label-schema.vendor="Vyper Team" org.label-schema.schema-version="1.0"
RUN apt-get update && apt-get install -y --no-install-recommends apt-utils gcc git libc6-dev libc-dev libssl-dev libgmp-dev && rm -rf /var/lib/apt/lists/*
ADD . /code
WORKDIR /code
RUN git reset --hard
RUN pip install --no-cache-dir .[test] && apt-get purge -y --auto-remove apt-utils gcc libc6-dev libc-dev libssl-dev
ENTRYPOINT ["/usr/local/bin/vyper"]

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。

(0, 1) # ARG指令依赖于FROM，因为ARG定义的变量可以在后续的构建步骤中使用  
(1, 2) # LABEL指令依赖于ARG，因为LABEL使用了ARG定义的变量  
(2, 3) # RUN apt-get update依赖于LABEL，因为安装软件包的步骤需要在设置标签之后  
(3, 4) # ADD . /code依赖于RUN apt-get update，因为复制代码到容器中的操作需要在安装软件包之后进行  
(4, 5) # WORKDIR /code依赖于ADD . /code，因为设置工作目录通常基于已经添加到容器中的代码或文件  
(5, 6) # RUN git reset --hard依赖于WORKDIR，因为git操作需要在正确的工作目录下执行  
(6, 7) # RUN pip install依赖于RUN git reset --hard，因为安装依赖和测试包需要在git操作之后进行  
(7, 8) # ENTRYPOINT依赖于RUN pip install，因为ENTRYPOINT定义的是容器启动时要执行的命令，这需要在所有依赖和配置安装完成后进行