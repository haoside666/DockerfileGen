已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


ARG PYTHON_VERSION=3.8
FROM python:${PYTHON_VERSION}
ENV PIP_OPTIONS "--no-cache-dir --progress-bar off"
RUN apt-get update && apt-get -y install openmpi-bin libopenmpi-dev libopenblas-dev && rm -rf /var/lib/apt/lists/* && pip install --no-cache-dir -U pip && pip install ${PIP_OPTIONS} -U setuptools
WORKDIR /workspaces
COPY . .
ARG BUILD_TYPE='dev'
RUN if [ "${BUILD_TYPE}" = "dev" ]; then pip install ${PIP_OPTIONS} -e '.[benchmark, checking, document, integration, optional, test]' --extra-index-url https://download.pytorch.org/whl/cpu; else pip install ${PIP_OPTIONS} -e .; fi && pip install ${PIP_OPTIONS} jupyter notebook
RUN pip install ${PIP_OPTIONS} PyMySQL cryptography psycopg2-binary
ENV PIP_OPTIONS ""

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。

[(0, 1),  # FROM 依赖于 ARG，因为基础镜像的版本由 ARG 指令设置的 PYTHON_VERSION 变量决定  
 (1, 2),  # ENV 依赖于 FROM，因为环境变量的设置需要在基础镜像之上进行  
 (2, 3),  # RUN apt-get update 等依赖于 ENV，因为安装软件包和更新 pip 需要用到 ENV 中设置的 PIP_OPTIONS  
 (3, 4),  # WORKDIR 依赖于 RUN apt-get update 等，因为工作目录的设定通常在安装软件包之后  
 (4, 5),  # COPY . . 依赖于 WORKDIR，因为复制文件到容器中时，目标路径由 WORKDIR 指定  
 (5, 6),  # ARG BUILD_TYPE 依赖于 COPY . .，因为 ARG 指令可能在构建过程中使用到容器内的文件  
 (6, 7),  # RUN if [ "${BUILD_TYPE}" = "dev" ]; then ... fi 依赖于 ARG BUILD_TYPE，因为该 RUN 指令根据 BUILD_TYPE 的值执行不同的 pip 安装命令  
 (7, 8),  # RUN pip install ${PIP_OPTIONS} PyMySQL cryptography psycopg-binary 依赖于前一个 RUN 指令，因为都是进行包的安装  
 (8, 9)]  # ENV PIP_OPTIONS "" 依赖于最后的 RUN 指令，虽然此处重置了 PIP_OPTIONS，但在 Dockerfile 中它表示了逻辑上的依赖顺序