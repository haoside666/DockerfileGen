已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


FROM python:3.12
ENV PYTHONUNBUFFERED 1
ENV IN_MISAGO_DOCKER 1
ENV MISAGO_PLUGINS "/app/plugins"
RUN apt-get update && apt-get install -y vim libffi-dev libssl-dev sqlite3 libjpeg-dev libopenjp2-7-dev locales cron postgresql-client-15 gettext
ADD dev /app/dev
ADD requirements.txt /app/requirements.txt
ADD plugins /app/plugins
WORKDIR /app/
RUN pip install --upgrade pip && pip install -r /app/requirements.txt && pip install pip-tools
RUN ./dev bootstrap_plugins
EXPOSE 8000
CMD python manage.py runserver 0.0.0.0:8000 --noreload

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。

[(1, 0),  # ENV 指令依赖于 FROM 指令，因为环境变量设置是在基础镜像之上进行的  
 (2, 1),  # 第二个 ENV 指令依赖于第一个 ENV 指令，环境变量之间可能有关联  
 (3, 2),  # 第三个 ENV 指令依赖于第二个 ENV 指令，同理  
 (4, 3),  # RUN 指令依赖于所有 ENV 指令，因为它可能会使用到这些环境变量  
 (5, 4),  # ADD dev 指令依赖于 RUN 指令，因为它在基础镜像和软件包安装后添加文件  
 (6, 5),  # ADD requirements.txt 指令依赖于 ADD dev 指令，文件添加的顺序可能重要  
 (7, 6),  # ADD plugins 指令依赖于 ADD requirements.txt 指令，同上  
 (8, 7),  # WORKDIR 指令依赖于之前的 ADD 指令，因为它改变了工作目录  
 (9, 8),  # 第二个 RUN 指令依赖于 WORKDIR 指令，因为 pip 安装命令在工作目录下执行  
 (10, 9), # RUN ./dev bootstrap_plugins 指令依赖于第二个 RUN 指令，因为插件引导需要依赖安装完成  
 (11, 10), # EXPOSE 指令不依赖于之前的任何指令，它只是声明端口  
 (12, 11)] # CMD 指令依赖于前面的所有指令，因为容器启动时执行的命令需要在所有配置和安装完成后才能执行
