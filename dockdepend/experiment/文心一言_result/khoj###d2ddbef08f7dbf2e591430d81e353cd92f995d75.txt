已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


FROM ubuntu:jammy
LABEL org.opencontainers.image.source https://github.com/khoj-ai/khoj
RUN apt update -y && apt -y install python3-pip git
WORKDIR /app
COPY pyproject.toml .
COPY README.md .
RUN sed -i 's/dynamic = \["version"\]/version = "0.0.0"/' pyproject.toml && pip install --no-cache-dir .
COPY . .
ENV PYTHONPATH=/app/src:$PYTHONPATH
ARG PORT
EXPOSE ${PORT}
ENTRYPOINT ["python3", "src/khoj/main.py"]

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。

[(1, 0),  # LABEL指令依赖于FROM指令，因为标签是在基础镜像上添加的  
 (2, 1),  # RUN指令依赖于LABEL指令，因为软件包的安装需要在标签设置之后  
 (3, 2),  # WORKDIR指令依赖于RUN指令，因为工作目录的设置需要在软件包安装后  
 (4, 3),  # COPY pyproject.toml . 依赖于WORKDIR指令，因为文件是复制到工作目录中  
 (5, 4),  # COPY README.md . 依赖于前一个COPY指令，因为都是向工作目录复制文件  
 (6, 5),  # RUN sed... 指令依赖于前一个COPY指令，因为需要在文件复制后进行修改  
 (7, 6),  # COPY . . 依赖于前一个RUN指令，因为需要在文件修改后复制整个目录  
 (8, 7),  # ENV指令依赖于COPY指令，因为环境变量的设置通常在文件复制之后  
 (9, 8),  # ARG指令不依赖于其他指令，它定义了一个变量可以在后续指令中使用  
 (10, 9), # EXPOSE指令依赖于ARG指令，因为暴露的端口号来自构建参数  
 (11, 10)]# ENTRYPOINT指令依赖于EXPOSE指令，因为入口点的设置通常在端口暴露后