已知Dockerfile中的最小单元是以指令开头的行，并且从0开始给每个指令行进行编号，即第n个指令行对应n-1。若(0,1)表示第二个指令行依赖于第一个指令行，注意前后逻辑关系，现在需要得到Dockerfile的所有指令行之间的依赖关系列表。要求返回一个列表，其中每个元素的形式类似于(0,1)这种形式。


FROM ubuntu:20.04
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt-get update && apt-get install -y --no-install-recommends build-essential git ninja-build nasm doxygen python3 python3-dev python3-pip python3-setuptools python3-wheel python3-tk && apt-get clean && rm -rf /var/lib/apt/lists
COPY . /vmaf
RUN pip3 install --upgrade pip
RUN pip3 install --no-cache-dir meson cython numpy
ENV PATH=/vmaf:/vmaf/libvmaf/build/tools:$PATH
RUN cd /vmaf && make clean && make
RUN pip3 install --no-cache-dir -r /vmaf/python/requirements.txt
WORKDIR /vmaf
ENV PYTHONPATH=python
ENTRYPOINT [ "./python/vmaf/script/run_vmaf.py" ]

请给出Dockerfile的所有指令行之间的依赖关系列表，只给出答案和一条注释描述即可，每个依赖关系后面跟着注释描述，不需要其余描述。

[(1, 0),  # ENV 依赖于 FROM，因为环境变量的设置需要在基础镜像上  
 (2, 1),  # RUN ln -snf ... 依赖于 ENV，因为时区设置需要读取 TZ 环境变量  
 (3, 2),  # RUN apt-get update ... 依赖于前一个 RUN，因为需要在设置时区后更新软件包列表  
 (4, 3),  # COPY . /vmaf 依赖于 apt-get 安装，因为需要在安装必要的依赖和工具后才能复制源代码  
 (5, 4),  # RUN pip3 install --upgrade pip 依赖于 COPY，因为需要在复制源代码后更新 pip  
 (6, 5),  # RUN pip3 install ... 依赖于 pip 升级，因为需要在升级 pip 后安装其他 Python 包  
 (7, 6),  # ENV PATH=... 依赖于之前的 pip 安装，因为路径更新依赖于已安装的包和工具  
 (8, 7),  # RUN cd /vmaf && make ... 依赖于环境变量 PATH 的更新和源代码的复制  
 (9, 8),  # RUN pip3 install -r ... 依赖于 make 构建，因为可能需要在构建后安装 Python 依赖  
 (10, 9), # WORKDIR 依赖于所有的安装和构建步骤，因为工作目录应在准备完毕后设置  
 (11, 10),# ENV PYTHONPATH=python 依赖于工作目录设置，因为 PYTHONPATH 指向工作目录中的 python 目录  
 (12, 11)] # ENTRYPOINT 依赖于之前的所有步骤，因为它是容器启动时执行的命令